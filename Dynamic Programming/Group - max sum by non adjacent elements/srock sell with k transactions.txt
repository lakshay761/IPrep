class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices.length == 0){return 0;}
        int n = prices.length;
        // if k >= n/2, then you can make maximum number of transactions.
        if (k >=  n/2) {
            int maxPro = 0;
            for (int i = 1; i < n; i++) {
                if (prices[i] > prices[i-1])
                    maxPro += prices[i] - prices[i-1];
            }
            return maxPro;
        }
        int[][] dp = new int[k+1][prices.length];
        for (int i = 1; i <= k; i++) {
            int localMax = dp[i-1][0] - prices[0];
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.max(dp[i][j-1],  prices[j] + localMax);
                localMax = Math.max(localMax, dp[i-1][j] - prices[j]);
            }
        }
        
        // display(dp);
        return dp[k][n-1];
    }
    public void display(int[][] dp){
        for(int i = 0 ; i<dp.length ; i++){
            for(int j = 0; j<dp[0].length ; j++){
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
    }
}